name: CI

on:
  push:
    branches: ["**"]
    tags: [v*]
  pull_request:
    branches: ["**"]
env:
  # .sbtopts specifies 8g, which is needed to import into IntelliJ, but on GH that exceeds the maximum available memory
  SBT_JAVA_OPTS: -J-Xms4g -J-Xmx4g
jobs:
  build:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        scala-version: ["2.12", "2.13", "3"]
        target-platform: ["JVM", "JS"]
    steps:
      - uses: actions/checkout@v4
      - uses: coursier/cache-action@v6.4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          cache: "sbt"
          java-version: 11
      - uses: coursier/setup-action@v1.3.5
      - name: Compile
        run: sbt $SBT_JAVA_OPTS -v "compileScoped ${{ matrix.scala-version }} ${{ matrix.target-platform }}"
      - name: Compile docs
        if: matrix.target-platform == 'JVM'
        run: sbt compileDocs
      - name: Test
        run: sbt $SBT_JAVA_OPTS -v "testScoped ${{ matrix.scala-version }} ${{ matrix.target-platform }}"
      - name: Generate LSIF
        if: matrix.target-platform == 'JVM' && matrix.scala-version == 2.13
        run: cs launch com.sourcegraph:scip-java_2.13:0.8.2 -- index
      - name: Install sourcegraph/src
        if: matrix.target-platform == 'JVM' && matrix.scala-version == 2.13

        run: yarn global add @sourcegraph/src
      - name: Upload LSIF data
        if: matrix.target-platform == 'JVM' && matrix.scala-version == 2.13

        run: src code-intel upload -trace=3 -root . -file index.scip -github-token $GITHUB_TOKEN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  mima:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # checkout tags so that dynver works properly (we need the version for MiMa)
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 11
          cache: "sbt"
      - name: Check MiMa
        run: sbt $SBT_JAVA_OPTS -v mimaReportBinaryIssues

  check-formatting:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # checkout tags so that dynver works properly (we need the version for MiMa)
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 11
          cache: "sbt"
      - name: Check formatting
        run: sbt $SBT_JAVA_OPTS -v scalafmtCheckAll

  publish:
    name: Publish release
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v'))
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: coursier/cache-action@v6.4
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 11
          cache: "sbt"
      - name: Compile
        run: sbt $SBT_JAVA_OPTS compile
      - name: Publish artifacts
        run: sbt $SBT_JAVA_OPTS ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
      - name: Extract version from commit message
        run: |
          version=${GITHUB_REF/refs\/tags\/v/}
          echo "VERSION=$version" >> $GITHUB_ENV
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
      - name: Publish release notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
